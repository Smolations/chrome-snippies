class Page {
  static assets = {
    faker: new Asset('https://cdn.jsdelivr.net/npm/faker/dist/faker.min.js'),
    lo: new Asset('https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js'),
    dtl: new Asset('https://unpkg.com/@testing-library/dom/dist/@testing-library/dom.umd.min.js', () => {
      window.DTL = window.TestingLibraryDom;
    }),
    jestDom: new Asset('https://unpkg.com/@testing-library/jest-dom/dist/index.js'),
    jestLite: new Asset('https://unpkg.com/jest-lite@1.0.0-alpha.4/dist/core.js', () => {
      const { core: { describe, it, expect } } = window.jestLite;

      // we're just messin with snippets, after all. don't judge!
      window.describe = describe;
      window.it = it;
      window.expect = expect;
    }),
    prettify: new Asset('https://unpkg.com/jest-lite@1.0.0-alpha.4/dist/prettify.js'),
    prettifyCss: new Asset('https://unpkg.com/jest-lite@1.0.0-alpha.4/dist/prettify.css'),
  };

  static resultsContainerId = 'jestLiteResults';
  static resultsClass = 'jest-lite-report'; // generated by jest-lite
  static stylesId = 'jestPageRunner';

  // defaults needed by this base class
  #e = {
    get resultsContainer() { return document.getElementById(Page.resultsContainerId); },
    get results() { return document.querySelector(`.${Page.resultsClass}`); },
    get styles() { return document.getElementById(Page.stylesId); },
  };

  get e() { return this.#e; }


  constructor(opts = {}) {
    const {
      libs = [],
    } = opts;

    const allLibs = [
      'prettifyCss',
      'jestLite',
      'prettify',
      'dtl',
    ].concat(libs);

    Promise.all(allLibs.map((lib) => Page.assets[lib].load()))
      .then(() => {
        const myName = this.constructor.name;
        // loop through assets and filter those that are loaded (maybe those that didn't?)
        console.log(`All %o scripts finished loading (%o)!`, myName, allLibs.join(', '));

        // this.#setupTestingLibrary();
        // this.#setupJest();
      })
      .catch((msg) => console.error(msg));

    // return new Proxy(this, pageProxyHandler);
  }


  /* ELEMENT SELECTOR DEFS */

  sel(name, selector) {
    if (!(name in this.#e)) {
      Object.defineProperty(this.#e, name, {
        get() { return document.querySelector(selector); },
      });
    } else {
      console.error(`Selector ${name} has already been defined!`);
    }
  }

  selAll(name, selector) {
    if (!(name in this.#e)) {
      Object.defineProperty(this.#e, name, {
        get() { return Array.from(document.querySelectorAll(selector)); },
      });
    } else {
      console.error(`Selector ${name} has already been defined!`);
    }
  }

  /* TEST HARNESS */

  describe(...args) {
    describe(...args);
    this.run();
  }

  resultsToggle() {
    const results = this.#e.resultsContainer;
    const currentDisplay = results.style.display;
    results.style.display = currentDisplay !== 'none' ? 'none' : 'block';
  }

  run() {
    const {
      core: { run },
      prettify,
    } = window.jestLite;

    this.#initResultsPanel();

    prettify.toHTML(run(), this.#e.resultsContainer);
  }

  /* DTL HELPERS */

  type(element, text) {
    this.fireEvent.change(element, { target: { value: String(text) } });
  }


  #initStyles() {
    let styles = this.#e.styles;

    if (!styles) {
      styles = document.createElement('style');
      styles.type = 'text/css';
      styles.id = Page.stylesId;
      styles.innerHTML = [
        `#${Page.resultsContainerId} {
            display: block;
            position: fixed;
            inset: 0 0 0 70%;
            z-index: 10000;
          }
        `,
        `.${Page.resultsClass} {
            overflowY: auto;
          }
        `, // eventually add bg opacity and side/bottom attach
      ].map((s) => s.replace(/\n/g, ' ')).join('\n');
      document.head.appendChild(styles);
    }
  }

  #initResultsPanel() {
    let results = this.#e.resultsContainer;

    if (!results) {
      results = document.createElement('div');
      results.setAttribute('id', Page.resultsContainerId);
      document.body.appendChild(results);
      // results.setAttribute('class', Page.resultsOpenClass);
    }

    this.#initStyles();
  }

  #setupTestingLibrary() {
    this.DTL = window.TestingLibraryDom;
    // this.fireEvent = this.DTL.fireEvent;
    this.screen = this.DTL.screen; // conflicts with window.screen

    window.fireEvent = this.DTL.fireEvent;
    window.waitFor = this.DTL.waitFor;
    window.within = this.DTL.within;
  }

  #setupJest() {
    const {
      core: { describe, it, expect },
    } = window.jestLite;

    // we're just messin with snippets, after all. don't judge!
    window.describe = describe;
    window.it = it;
    window.expect = expect;
  }
}
